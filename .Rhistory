students <- c(Abraham, Beatrice, Cory, Dinah, Eric, Felicia)
students <- c(Abraham, Beatrice, Cory, Dinah, Eric, Felicia)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in students) {
print(student)
}
}
View(roll_call)
View(roll_call)
View(roll_call)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
install.packages("tidyverse")
library(jsonlite)
library(tidyverse)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
#Two-sample t-test
sample_table <- population_table %>% sample_n(50)
sample_table2 <- population_table %>% sample_n(50)
#T-test
t.test(log10(sample_table$Miles_Driven), log10(sample_table2$Miles_Driven))
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
#paired t-test
#compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
data(mtcars)
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#create scatter plot
plt + geom_point()
#Calculate Correlation coeff.
cor(mtcars$hp, mtcars$qsec)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
#import dataset into ggplot2
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#calculate correlation coefficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
#convert data frame into numeric matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
#Correlation model
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
#Using linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals)
color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
chisq.test()
?chisq.test
table(mpg$class,mpg$year) #generate contingency table
plt + geom_point() + geom_line(aes(y=yvals),
color = "red") #plot scatter and linear model
#Using linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
install.packages("ggplot2")
library(ggplot2)
#Using linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals),
color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
install.packages("tidyverse")
library(tidyverse)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(jsonlite)
library(`dplyr`)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
#import dataset into ggplot2
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#calculate correlation coefficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
#convert data frame into numeric matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
#Correlation model
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
#Using linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals),
color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
setwd("C:/Users/16479/OneDrive/Desktop/UoT/Repo/Module 15 - R/R_Analysis/MechaCar_Statistical_Analysis")
install.packages("tidyverse")
plic <- installed.packages(.Library, priority = "high", fields = "License")
install.packages("tidyverse")
View(mtcars)
install.packages("tidyverse")
library(dplyr)
#Step 4: Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar_df <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(mechacar_df)
View(mtcars)
#Perform linear regression using the lm() function.
#In the lm() function, pass in all six variables (i.e., columns),
#and add the dataframe you created in Step 4 as the data parameter.
lm(vehicle_weight ~ mpg + vehicle_length + spoiler_angle + ground_clearance + AWG, data=mechacar_df)
#Perform linear regression using the lm() function.
#In the lm() function, pass in all six variables (i.e., columns),
#and add the dataframe you created in Step 4 as the data parameter.
lm(vehicle_weight ~ mpg + vehicle_length + spoiler_angle + ground_clearance + AWD, data=mechacar_df)
summary(lm(vehicle_weight ~ mpg + vehicle_length + spoiler_angle + ground_clearance + AWD, data=mechacar_df)
)
#Step 6: Using the summary() function, determine the p-value and
#the r-squared value for the linear regression model.
summary(lm(vehicle_weight ~ mpg + vehicle_length + spoiler_angle +
ground_clearance + AWD, data=mechacar_df))
#Step 6: Using the summary() function, determine the p-value and
#the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_weight + vehicle_length + spoiler_angle +
ground_clearance + AWD, data=mechacar_df))
#Step 5: Perform linear regression using the lm() function.
#In the lm() function, pass in all six variables (i.e., columns),
#and add the dataframe you created in Step 4 as the data parameter.
lm(mpg ~ vehicle_weight + vehicle_length + spoiler_angle + ground_clearance + AWD, data=mechacar_df)
#Step 6: Using the summary() function, determine the p-value and
#the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_weight + vehicle_length + spoiler_angle +
ground_clearance + AWD, data=mechacar_df))
#Step 5: Perform linear regression using the lm() function.
#In the lm() function, pass in all six variables (i.e., columns),
#and add the dataframe you created in Step 4 as the data parameter.
lm(mpg ~ vehicle_weight + vehicle_weight+ vehicle_length + spoiler_angle + ground_clearance + AWD, data=mechacar_df)
#Step 6: Using the summary() function, determine the p-value and
#the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_weight + vehicle_weight+ vehicle_length + spoiler_angle +
ground_clearance + AWD, data=mechacar_df))
#Step 5: Perform linear regression using the lm() function.
#In the lm() function, pass in all six variables (i.e., columns),
#and add the dataframe you created in Step 4 as the data parameter.
lm(mpg ~ vehicle_weight + vehicle_length + spoiler_angle + ground_clearance + AWD, data=mechacar_df)
#Step 6: Using the summary() function, determine the p-value and
#the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_weight + vehicle_length + spoiler_angle +
ground_clearance + AWD, data=mechacar_df))
#  Read in the diabetes.csv file.
diabetes <- read.csv(file="06-Evr_Fits_and_Regression/Resources/diabetes.csv")
setwd("C:/Users/16479/OneDrive/Desktop/UoT/UTOR-VIRT-DATA-PT-12-2021-U-B/15-R/2/Activities/06-Evr_Fits_and_Regression")
#  Read in the diabetes.csv file.
diabetes <- read.csv(file="06-Evr_Fits_and_Regression/Resources/diabetes.csv")
setwd("C:/Users/16479/OneDrive/Desktop/UoT/UTOR-VIRT-DATA-PT-12-2021-U-B/15-R/2/Activities")
#  Read in the diabetes.csv file.
diabetes <- read.csv(file="06-Evr_Fits_and_Regression/Resources/diabetes.csv")
# Plot a scatter plot of bp vs. one year disease progression
ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#   :S6:
#
#   Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).
#
# Source URL:
#   http://www4.stat.ncsu.edu/~boos/var.select/diabetes.html
#
# For more information see:
#   Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) "Least Angle Regression," Annals of Statistics (with discussion), 407-499.
# (http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
#   :S6:
#
#   Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).
#
# Source URL:
#   http://www4.stat.ncsu.edu/~boos/var.select/diabetes.html
#
# For more information see:
#   Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) "Least Angle Regression," Annals of Statistics (with discussion), 407-499.
# (http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
#   :S6:
#
#   Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).
#
# Source URL:
#   http://www4.stat.ncsu.edu/~boos/var.select/diabetes.html
#
# For more information see:
#   Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) "Least Angle Regression," Annals of Statistics (with discussion), 407-499.
# (http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)
install.packages("tidyverse")
library(ggplot2)
# Plot a scatter plot of bp vs. one year disease progression
ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
summary(reg)
# Get the r-sqaured value.
summary(reg)$r.squared
summary(reg)
# Perform linear regression
reg <- lm(One_Year_Disease_Progress ~ bp, data=diabetes)
summary(reg)
library(ggplot2)
ggplot(mechacar_df, aes(mpg, vehicle_weight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
setwd("C:/Users/16479/OneDrive/Desktop/UoT/Repo/Module 15 - R/R_Analysis/MechaCar_Statistical_Analysis")
#DELIVERABLE 2
#Step1: read in the Suspension_Coil.csv file as a table.
susp_coil <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
View(susp_coil)
